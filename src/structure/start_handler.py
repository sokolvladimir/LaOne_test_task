from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from src.db.methods import DB
from src.structure.start_keyboard import start_kb


async def start_program(message: Message, state=FSMContext):
    if state:
        await state.finish()
    if len(message.text.split()) == 2:
        _, poll_id = message.text.split()
        poll = DB.get_poll(poll_id)
        if poll:
            await message.answer_poll(**poll)
        else:
            await message.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif message.chat.type == "private":

        text = "–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!üëã\n\n" \
               "–°–º–æ—Ç—Ä–∏ —á—Ç–æ —è –º–æ–≥—É:\n" \
               "1. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.\n" \
               "2. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.\n" \
               "3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∏–ª—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º.\n" \
               "4. –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç."
        await message.answer(text, reply_markup=start_kb())


def register_handlers_start(dp: Dispatcher):
    dp.register_message_handler(start_program, commands=["start", "back"], state="*")
